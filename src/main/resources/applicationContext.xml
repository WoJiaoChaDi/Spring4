<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置一个 bean -->
    <bean id="helloWorld" class="com.atguigu.spring.helloworld.HelloWorld">
        <!-- 为属性赋值 -->
        <property name="user" value="Jerry"></property>
    </bean>

    <!-- 配置一个 bean -->
    <bean id="helloWorld2" class="com.atguigu.spring.helloworld.HelloWorld">
        <!-- 为属性赋值 -->
        <!-- 通过属性注入: 通过 setter 方法注入属性值 -->
        <property name="user" value="Tom"></property>
    </bean>

    <!-- 若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
    <!-- 可以根据 index 和 value 进行更加精确的定位. (了解) -->
    <bean id="car" class="com.atguigu.spring.helloworld.Car">
        <constructor-arg value="ChangAnFord" index="0"></constructor-arg>
        <constructor-arg value="250000" index="1"></constructor-arg>
    </bean>

    <!-- 若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
    <!-- 可以根据 index 和 value 进行更加精确的定位. (了解) -->
    <bean id="car1" class="com.atguigu.spring.helloworld.Car">
        <constructor-arg value="ChangAnFord" type="java.lang.String"></constructor-arg>
        <constructor-arg value="250000" type="java.lang.String"></constructor-arg>
    </bean>

    <bean id="car2" class="com.atguigu.spring.helloworld.Car">
        <!-- 若字面值中包含特殊字符, 则可以使用 DCDATA 来进行赋值. (了解) -->
        <constructor-arg>
            <value><![CDATA[<ATARZA>]]></value>
        </constructor-arg>
        <constructor-arg value="180"></constructor-arg>
    </bean>

    <!-- 配置 bean -->
    <bean id="dao5" class="com.atguigu.spring.ref.Dao"></bean>
    <bean id="service" class="com.atguigu.spring.ref.Service">
        <!-- 通过 ref 属性值指定当前属性指向哪一个 bean! -->
        <property name="dao" ref="dao5"></property>
    </bean>

    <!-- 声明使用内部 bean -->
    <bean id="service2" class="com.atguigu.spring.ref.Service">
        <property name="dao">
            <!-- 内部 bean给dao赋值, 类似于匿名内部类对象. 不能被外部的 bean 来引用, 也没有必要设置 id 属性 -->
            <bean class="com.atguigu.spring.ref.Dao">
                <property name="dataSource" value="c3p0"></property>
            </bean>
        </property>
    </bean>

    <bean id="action" class="com.atguigu.spring.ref.Action">
        <property name="service" ref="service2"></property>
        <!-- 设置级联属性(了解) -->
        <property name="service.dao.dataSource" value="DBCP2"></property>
    </bean>

    <!-- 装配集合属性 -->
    <bean id="user" class="com.atguigu.spring.helloworld.User">
        <property name="userName" value="Jack"></property>
        <property name="cars">
            <!-- 使用 list 元素来装配集合属性 -->
            <list>
                <ref bean="car"/>
                <ref bean="car2"/>
            </list>
        </property>
    </bean>

    <!--Map集合属性-->
    <bean id="newPerson" class="com.atguigu.spring.helloworld.User">
        <property name="userName" value="Jack"></property>
        <property name="age" value="28"></property>
        <property name="carMap">
            <map>
                <entry key="AA" value-ref="car"></entry>
                <entry key="BB" value-ref="car2"></entry>
            </map>
        </property>
    </bean>

    <!--Properties属性-->
    <bean id="dataSource" class="com.atguigu.spring.beans.collections.DataSource">
        <property name="properties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">1234</prop>
                <prop key="jdbcUrl">jdbc:mysql:///test</prop>
                <prop key="driverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>


    <!-- 声明集合类型的 bean -->
    <util:list id="cars">
        <ref bean="car"/>
        <ref bean="car2"/>
    </util:list>

    <bean id="user2" class="com.atguigu.spring.helloworld.User">
        <property name="userName" value="Rose"></property>
        <!-- 引用外部声明的 list -->
        <property name="cars" ref="cars"></property>
    </bean>

    <!-- 通过p 命名空间为bean的属性赋值，需要先导入p命名空间 -->
    <bean id="user3" class="com.atguigu.spring.helloworld.User"
          p:cars-ref="cars" p:userName="Titannic"></bean>

    <!--自动装配-->
    <!--byType 根据bean 的类型和当前bean 的属性的类型进行自动装配。若 IOC 容器中有1个以上的类型匹配的bean，则抛异常-->
    <bean id="person" class="com.atguigu.spring.beans.autowire.Person" autowire="byType">
        <property name="name" value="zhangsan"></property>
    </bean>

    <!--byName 根据bean 的名字和当前bean 的 setter 风格的属性名进行自动装配，若有匹配的，则进行自动装配，若没有匹配的，则不装配-->
    <bean id="person" class="com.atguigu.spring.beans.autowire.Person" autowire="byName">
        <property name="name" value="zhangsan"></property>
    </bean>

    <!--继承bean-->
    <!-- 通过p 命名空间为bean的属性赋值，需要先导入p命名空间 -->
    <bean id="user7" class="com.atguigu.spring.helloworld.User"
          p:cars-ref="cars" p:userName="Titannic" abstract="true"></bean>
    <!-- bean 的配置能够继承吗 ? 使用 parent 来完成继承 -->
    <bean id="user4" parent="user7" p:userName="Bob"></bean>

    <bean id="user6" parent="user7" p:userName="维多利亚"></bean>


    <!--bean的依赖-->
    <!-- 要求在配置user5时，必须有个关联的user6！换句话user5这个bean依赖于user6这个bean -->
    <bean id="user5" parent="user" p:userName="Backham" depends-on="user6"></bean>

    <!--bean的作用域-->
    <bean id="address" class="com.atguigu.spring.beans.autowire.Address" scope="prototype">
        <property name="city" value="BeiJing"></property>
        <property name="street" value="HuiLongGuan"></property>
    </bean>

</beans>
